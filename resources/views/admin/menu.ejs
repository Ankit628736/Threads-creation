<%- contentFor('body') %>

<section class="menu light-section">
    <div class="container mx-auto pt-12">
        <!-- Admin Navigation -->
        <div class="mb-6 bg-white rounded-lg shadow p-4">
            <nav class="flex space-x-6">
                <a href="/admin/orders" class="text-gray-600 hover:text-blue-600">Orders</a>
                <a href="/admin/menu" class="text-blue-600 font-semibold border-b-2 border-blue-600">Menu</a>
                <a href="/admin/users" class="text-gray-600 hover:text-blue-600">Users</a>
                <a href="/" class="text-gray-600 hover:text-blue-600">Home</a>
            </nav>
        </div>

        <div class="flex justify-between items-center mb-6">
            <h1 class="font-bold text-lg">Manage Menu Items</h1>
            <a href="/admin/menu/create" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                Add New Item
            </a>
        </div>
        
        <% if (typeof error !== 'undefined' && error) { %>
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                <%= error %>
            </div>
        <% } %>
        
        <% 
        // Ensure pizzas is defined and is an array
        if (typeof pizzas === 'undefined') {
            pizzas = [];
        }
        %>
        
        <% if (!pizzas || pizzas.length === 0) { %>
            <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-4">
                <h3 class="font-bold">No menu items found</h3>
                <p>There are currently no items in the menu.</p>
                <p class="mt-2">Add some items to get started.</p>
            </div>
        <% } else { %>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                <% pizzas.forEach(pizza => { %>
                    <div class="bg-white rounded-lg shadow-md overflow-hidden">
                        <img src="/img/<%= pizza.image %>" alt="<%= pizza.name %>" class="w-full h-48 object-cover">
                        <div class="p-4">
                            <h3 class="font-bold text-lg mb-2"><%= pizza.name %></h3>
                            <p class="text-gray-600 mb-2">Size: <%= pizza.size %></p>
                            <p class="text-lg font-semibold text-green-600 mb-3">â‚¹<%= pizza.price %></p>
                            <p class="text-sm mb-3">
                                Status: 
                                <span class="<%= pizza.inStock ? 'text-green-600' : 'text-red-600' %>">
                                    <%= pizza.inStock ? 'In Stock' : 'Out of Stock' %>
                                </span>
                            </p>
                            <div class="flex space-x-2">
                                <button class="toggle-stock flex-1 bg-<%= pizza.inStock ? 'red' : 'green' %>-500 text-white px-3 py-1 rounded text-sm hover:bg-<%= pizza.inStock ? 'red' : 'green' %>-600"
                                        data-id="<%= pizza._id %>">
                                    <%= pizza.inStock ? 'Mark Out of Stock' : 'Mark In Stock' %>
                                </button>
                                <button class="delete-item bg-gray-500 text-white px-3 py-1 rounded text-sm hover:bg-gray-600"
                                        data-id="<%= pizza._id %>">
                                    Delete
                                </button>
                            </div>
                        </div>
                    </div>
                <% }) %>
            </div>
        <% } %>
    </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Handle stock toggle
    const toggleButtons = document.querySelectorAll('.toggle-stock');
    toggleButtons.forEach(button => {
        button.addEventListener('click', function() {
            const itemId = this.getAttribute('data-id');
            
            fetch(`/admin/menu/${itemId}/toggle-stock`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Failed to update stock status');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error updating stock status');
            });
        });
    });
    
    // Handle delete
    const deleteButtons = document.querySelectorAll('.delete-item');
    deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
            if (confirm('Are you sure you want to delete this item?')) {
                const itemId = this.getAttribute('data-id');
                
                fetch(`/admin/menu/${itemId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Failed to delete item');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error deleting item');
                });
            }
        });
    });
});
</script>